#!perl6

use Tomtit;

sub MAIN (

  $thing?,
  Bool :$log        = False,
  Bool :$quiet      = False,
  Bool :$q          = False, # alias for $quiet

)

{

my $tests-cnt = 0;
my $failures-cnt = 0;

my $reports-dir = "{%*ENV<HOME>}/.tomty/reports";
mkdir "{%*ENV<HOME>}/.tomty";
mkdir $reports-dir;

my $q-mode = $q || $quiet;

  if $thing && $log {

    if "$reports-dir/$thing.log".IO ~~ :e {
      say slurp "$reports-dir/$thing.log"
    } else {
      say "no log for <$thing> found"
    }

  } else {

    for scenario-list("{$*CWD}/.tom").grep({ $_ ~~ /^^ 'test-' \S / }) -> $s {
  

      if $q-mode {

        print "[$s] ....... ";
  
      } else {

        say "[$s] ....... ";

      }


      my $proc = Proc::Async.new("tom",$s);

      my $fh = open "$reports-dir/$s.log", :w;
      my $start;

      react {
  
          whenever $proc.stdout.lines { # split input on \r\n, \n, and \r
  
            $fh.say($_);

            say $_ unless $q-mode;
  
          }
  
          whenever $proc.stderr { # chunks
  
            say $_ unless $q-mode;
  
          }
  
          whenever $proc.ready {
              $start = time;
              #say ‘PID: ’, $_ # Only in Rakudo 2018.04 and newer, otherwise Nil
          }
  
          whenever $proc.start {
  
              #say ‘Proc finished: exitcode=’, .exitcode, ‘ signal=’, .signal;
  
              my $exit-code = .exitcode;

              $tests-cnt++;

              if $exit-code != 0 {
                $failures-cnt++;
                print " {time - $start} sec. FAIL\n" if $q-mode;
              } else {
                print " {time - $start} sec. OK\n" if $q-mode;
              }
  
              $fh.close;

              done # gracefully jump from the react block
  
         }
  
      }
  
    }
  
    say "=========================================";
  
    if $failures-cnt >= 1 {
      say ")=: ({$tests-cnt - $failures-cnt}) tests passed / ($failures-cnt) failed"
    } else {
      say "(=: ($tests-cnt) tests passed"
    }
  
  }
}


